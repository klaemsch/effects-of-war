labs(title = "Global distribution of domains within GDELT",
caption = "GDELT places domains in countries where they report the most.\n This is an overview of the divercity/indivercity of the distribution of those domains",
size = "Number of Domains") +
theme_void() +
theme(
axis.text = element_blank(),
axis.title = element_blank(),
axis.ticks = element_blank(),
legend.position = "bottom",
plot.title = element_text(size = 20, hjust = 0.5)
)
plot(events_rs_vs_up_tone_map)
ggsave(
"events/rs_vs_up/figures/events_rs_vs_up_tone_map.png",
events_rs_vs_up_tone_map,
width = 10,
height = 7,
units = "in",
dpi = 300
)
library(ggmap)
library(ggplot2)
library(dplyr)
library(ggrepel)
library(maps)
# load number of events per
events_is_vs_gz_by_country <-
readRDS("events/is_vs_gz/events_is_vs_gz_by_country.rds")
# load map
world_map <- readRDS("maps/world_map.rds")
# get country polygon data
mapdata <- map_data("world")
# map borders
borders <- data.frame(
left = -132.7,
bottom = -59.7,
right = 179.9,
top = 72.6
)
# filter and mutate
# join with region/country polygon data
events_is_vs_gz_by_country <- events_is_vs_gz_by_country %>%
select(FIPSCountryCode,
CountryName,
CountryLatitude,
CountryLongitude,
AvgTone,
TotalOccurrences) %>%
mutate(
CountryLatitude = as.numeric(CountryLatitude),
CountryLongitude = as.numeric(CountryLongitude),
#WeightedAvgTone = AvgTone / TotalOccurrences * 1000,
#NormalizedWeightedAvgTone = (WeightedAvgTone / max(WeightedAvgTone)) * 10
) %>%
filter(
!is.na(CountryLatitude) &
!is.na(CountryLongitude) &
CountryLatitude >= borders$bottom &
CountryLatitude <= borders$top &
CountryLongitude >= borders$left &
CountryLongitude <= borders$right &
TotalOccurrences >= 50
)
events_is_vs_gz_by_country$CountryName <- gsub("United Kingdom", "UK", events_is_vs_gz_by_country$CountryName)
events_is_vs_gz_by_country$CountryName <- gsub("United States", "USA", events_is_vs_gz_by_country$CountryName)
events_is_vs_gz_by_country$CountryName <- gsub("Trinidad and Tobago", "Trinidad", events_is_vs_gz_by_country$CountryName)
events_is_vs_gz_by_country$CountryName <- gsub("Saint Vincent and the Grenadines", "Saint Vincent", events_is_vs_gz_by_country$CountryName)
events_is_vs_gz_by_country$CountryName <- gsub("Myanmar [Burma]", "Myanmar", events_is_vs_gz_by_country$CountryName)
events_is_vs_gz_by_country$CountryName <- gsub("Macedonia [FYROM]", "North Macedonia", events_is_vs_gz_by_country$CountryName)
map_data <- events_is_vs_gz_by_country %>%
left_join(mapdata, by = c("CountryName" = "region"), keep=TRUE)
test <- map_data %>% filter(is.na(region))
events_is_vs_gz_tone_map <- world_map +
geom_polygon(
data = map_data,
aes(
x = long,
y = lat,
group = group,
fill = AvgTone
),
alpha = 0.5
) +
scale_fill_gradient(low = "red", high = "blue", name = "AvgTone", na.value = "grey") +
labs(title = "Global distribution of domains within GDELT",
caption = "GDELT places domains in countries where they report the most.\n This is an overview of the divercity/indivercity of the distribution of those domains",
size = "Number of Domains") +
theme_void() +
theme(
axis.text = element_blank(),
axis.title = element_blank(),
axis.ticks = element_blank(),
legend.position = "bottom",
plot.title = element_text(size = 20, hjust = 0.5)
)
plot(events_is_vs_gz_tone_map)
ggsave(
"events/is_vs_gz/figures/events_is_vs_gz_tone_map.png",
events_is_vs_gz_tone_map,
width = 10,
height = 7,
units = "in",
dpi = 300
)
library(ggmap)
library(ggplot2)
library(dplyr)
library(ggrepel)
library(maps)
# load number of events per
events_rs_vs_up_by_country <-
readRDS("events/rs_vs_up/events_rs_vs_up_by_country.rds")
# load map
world_map <- readRDS("maps/world_map.rds")
# get country polygon data
mapdata <- map_data("world")
# map borders
borders <- data.frame(
left = -132.7,
bottom = -59.7,
right = 179.9,
top = 72.6
)
# filter and mutate
# join with region/country polygon data
events_rs_vs_up_by_country <- events_rs_vs_up_by_country %>%
select(FIPSCountryCode,
CountryName,
CountryLatitude,
CountryLongitude,
AvgTone,
TotalOccurrences) %>%
mutate(
CountryLatitude = as.numeric(CountryLatitude),
CountryLongitude = as.numeric(CountryLongitude),
#WeightedAvgTone = AvgTone / TotalOccurrences * 1000,
#NormalizedWeightedAvgTone = (WeightedAvgTone / max(WeightedAvgTone)) * 10
) %>%
filter(
!is.na(CountryLatitude) &
!is.na(CountryLongitude) &
CountryLatitude >= borders$bottom &
CountryLatitude <= borders$top &
CountryLongitude >= borders$left &
CountryLongitude <= borders$right &
TotalOccurrences >= 50
)
events_rs_vs_up_by_country$CountryName <- gsub("United Kingdom", "UK", events_rs_vs_up_by_country$CountryName)
events_rs_vs_up_by_country$CountryName <- gsub("United States", "USA", events_rs_vs_up_by_country$CountryName)
events_rs_vs_up_by_country$CountryName <- gsub("Trinidad and Tobago", "Trinidad", events_rs_vs_up_by_country$CountryName)
events_rs_vs_up_by_country$CountryName <- gsub("Saint Vincent and the Grenadines", "Saint Vincent", events_rs_vs_up_by_country$CountryName)
events_rs_vs_up_by_country$CountryName <- gsub("Myanmar [Burma]", "Myanmar", events_rs_vs_up_by_country$CountryName)
events_rs_vs_up_by_country$CountryName <- gsub("Macedonia [FYROM]", "North Macedonia", events_rs_vs_up_by_country$CountryName)
map_data <- events_rs_vs_up_by_country %>%
left_join(mapdata, by = c("CountryName" = "region"), keep=TRUE)
test <- map_data %>% filter(is.na(region))
events_rs_vs_up_tone_map <- world_map +
geom_polygon(
data = map_data,
aes(
x = long,
y = lat,
group = group,
fill = AvgTone
),
alpha = 0.5
) +
scale_fill_gradient(low = "red", high = "blue", name = "AvgTone", na.value = "grey") +
labs(title = "Global distribution of domains within GDELT",
caption = "GDELT places domains in countries where they report the most.\n This is an overview of the divercity/indivercity of the distribution of those domains",
size = "Number of Domains") +
theme_void() +
theme(
axis.text = element_blank(),
axis.title = element_blank(),
axis.ticks = element_blank(),
legend.position = "bottom",
plot.title = element_text(size = 20, hjust = 0.5)
)
plot(events_rs_vs_up_tone_map)
ggsave(
"events/rs_vs_up/figures/events_rs_vs_up_tone_map.png",
events_rs_vs_up_tone_map,
width = 10,
height = 7,
units = "in",
dpi = 300
)
gc()
gc()
gc()
library(dplyr)
# events by country of origin
events_rs_vs_up_by_country <-
readRDS("events/rs_vs_up/events_rs_vs_up_by_country.rds")
View(events_rs_vs_up_by_country)
events_by_domain <- readRDS("E:/HiDrive/HiDrive/Dokumente/Studium/Digital Humanities/Module/Introduction Digital Humanities/projektarbeit/events/events_by_domain.rds")
View(events_by_domain)
# events by country of origin
events_is_vs_gz_by_country <-
readRDS("events/is_vs_gz/events_is_vs_gz_by_country.rds")
View(events_is_vs_gz_by_country)
domain_to_country_map <- readRDS("E:/HiDrive/HiDrive/Dokumente/Studium/Digital Humanities/Module/Introduction Digital Humanities/projektarbeit/events/domain_to_country_map.rds")
# maps all events to country
domain_to_country_map <- readRDS("events/domain_to_country_map.rds")
library(dplyr)
# is vs gz events by country of origin
events_is_vs_gz_by_country <-
readRDS("events/is_vs_gz/events_is_vs_gz_by_country.rds")
# maps all events to country
domain_to_country_map <- readRDS("events/domain_to_country_map.rds")
View(domain_to_country_map)
sum(domain_to_country_map$TotalOccurrences)
View(events_is_vs_gz_by_country)
test <- events_is_vs_gz_by_country %>%
left_join(domain_to_country_map, by="FIPSCountryCode")
View(test)
??rename
test <- events_is_vs_gz_by_country %>%
rename(ISvsGZOccurences = TotalOccurrences) %>%
left_join(domain_to_country_map, by="FIPSCountryCode") %>%
mutate(
test =
)
test <- events_is_vs_gz_by_country %>%
rename(ISvsGZOccurences = TotalOccurrences) %>%
left_join(domain_to_country_map, by="FIPSCountryCode")# %>%
View(test)
test <- events_is_vs_gz_by_country %>%
rename(ISvsGZOccurences = TotalOccurrences) %>%
merge(domain_to_country_map, by="FIPSCountryCode")# %>%
View(test)
test <- events_is_vs_gz_by_country %>%
rename(ISvsGZOccurences = TotalOccurrences) %>%
merge(domain_to_country_map)# %>%
View(test)
test <- events_is_vs_gz_by_country %>%
rename(ISvsGZOccurences = TotalOccurrences) %>%
merge(domain_to_country_map) %>%
mutate(
test = ISvsGZOccurences / TotalOccurrences
)
View(test)
test <- events_is_vs_gz_by_country %>%
rename(ISvsGZOccurences = TotalOccurrences) %>%
merge(domain_to_country_map) %>%
mutate(
test = ISvsGZOccurences / TotalOccurrences * 1000
)
View(test)
library(dplyr)
# is vs gz events by country of origin
events_is_vs_gz_by_country <-
readRDS("events/is_vs_gz/events_is_vs_gz_by_country.rds")
# maps all events to country
domain_to_country_map <- readRDS("events/domain_to_country_map.rds")
# join and calculate percentage of reports of the whole reporting done by the country
events_is_vs_gz_by_country <- events_is_vs_gz_by_country %>%
rename(ISvsGZOccurences = TotalOccurrences) %>%
merge(domain_to_country_map) %>%
mutate(
PercOccur = ISvsGZOccurences / TotalOccurrences * 1000
)
library(ggmap)
library(ggplot2)
library(dplyr)
library(ggrepel)
library(maps)
# is vs gz events by country of origin
events_is_vs_gz_by_country <-
readRDS("events/is_vs_gz/events_is_vs_gz_by_country.rds")
# maps all events to country
domain_to_country_map <- readRDS("events/domain_to_country_map.rds")
# join and calculate percentage of reports of the whole reporting done by the country
events_is_vs_gz_by_country <- events_is_vs_gz_by_country %>%
rename(ISvsGZOccurences = TotalOccurrences) %>%
merge(domain_to_country_map) %>%
mutate(
PercOccur = ISvsGZOccurences / TotalOccurrences * 1000
)
# load map
world_map <- readRDS("maps/world_map.rds")
# get country polygon data
mapdata <- map_data("world")
# map borders
borders <- data.frame(
left = -132.7,
bottom = -59.7,
right = 179.9,
top = 72.6
)
# filter and mutate
# join with region/country polygon data
events_is_vs_gz_by_country <- events_is_vs_gz_by_country %>%
select(FIPSCountryCode,
CountryName,
CountryLatitude,
CountryLongitude,
PercOccur) %>%
mutate(
CountryLatitude = as.numeric(CountryLatitude),
CountryLongitude = as.numeric(CountryLongitude),
) %>%
filter(
!is.na(CountryLatitude) &
!is.na(CountryLongitude) &
CountryLatitude >= borders$bottom &
CountryLatitude <= borders$top &
CountryLongitude >= borders$left &
CountryLongitude <= borders$right
)
events_is_vs_gz_by_country$CountryName <- gsub("United Kingdom", "UK", events_is_vs_gz_by_country$CountryName)
events_is_vs_gz_by_country$CountryName <- gsub("United States", "USA", events_is_vs_gz_by_country$CountryName)
events_is_vs_gz_by_country$CountryName <- gsub("Trinidad and Tobago", "Trinidad", events_is_vs_gz_by_country$CountryName)
events_is_vs_gz_by_country$CountryName <- gsub("Saint Vincent and the Grenadines", "Saint Vincent", events_is_vs_gz_by_country$CountryName)
events_is_vs_gz_by_country$CountryName <- gsub("Myanmar [Burma]", "Myanmar", events_is_vs_gz_by_country$CountryName)
events_is_vs_gz_by_country$CountryName <- gsub("Macedonia [FYROM]", "North Macedonia", events_is_vs_gz_by_country$CountryName)
map_data <- events_is_vs_gz_by_country %>%
left_join(mapdata, by = c("CountryName" = "region"), keep=TRUE)
test <- map_data %>% filter(is.na(region))
View(test)
events_is_vs_gz_tone_map <- world_map +
geom_polygon(
data = map_data,
aes(
x = long,
y = lat,
group = group,
fill = PercOccur
),
alpha = 0.5
) +
scale_fill_gradient(low = "red", high = "blue", name = "PercOccur", na.value = "grey") +
labs(title = "Global distribution of domains within GDELT",
caption = "GDELT places domains in countries where they report the most.\n This is an overview of the divercity/indivercity of the distribution of those domains",
size = "Number of Domains") +
theme_void() +
theme(
axis.text = element_blank(),
axis.title = element_blank(),
axis.ticks = element_blank(),
legend.position = "bottom",
plot.title = element_text(size = 20, hjust = 0.5)
)
plot(events_is_vs_gz_tone_map)
library(ggmap)
library(ggplot2)
library(dplyr)
library(ggrepel)
library(maps)
# is vs gz events by country of origin
events_is_vs_gz_by_country <-
readRDS("events/is_vs_gz/events_is_vs_gz_by_country.rds")
# maps all events to country
domain_to_country_map <- readRDS("events/domain_to_country_map.rds")
# join and calculate percentage of reports of the whole reporting done by the country
events_is_vs_gz_by_country <- events_is_vs_gz_by_country %>%
rename(ISvsGZOccurences = TotalOccurrences) %>%
merge(domain_to_country_map) %>%
mutate(
PercOccur = ISvsGZOccurences / TotalOccurrences * 100
)
# load map
world_map <- readRDS("maps/world_map.rds")
# get country polygon data
mapdata <- map_data("world")
# map borders
borders <- data.frame(
left = -132.7,
bottom = -59.7,
right = 179.9,
top = 72.6
)
# filter and mutate
# join with region/country polygon data
events_is_vs_gz_by_country <- events_is_vs_gz_by_country %>%
select(FIPSCountryCode,
CountryName,
CountryLatitude,
CountryLongitude,
PercOccur) %>%
mutate(
CountryLatitude = as.numeric(CountryLatitude),
CountryLongitude = as.numeric(CountryLongitude),
) %>%
filter(
!is.na(CountryLatitude) &
!is.na(CountryLongitude) &
CountryLatitude >= borders$bottom &
CountryLatitude <= borders$top &
CountryLongitude >= borders$left &
CountryLongitude <= borders$right
)
events_is_vs_gz_by_country$CountryName <- gsub("United Kingdom", "UK", events_is_vs_gz_by_country$CountryName)
events_is_vs_gz_by_country$CountryName <- gsub("United States", "USA", events_is_vs_gz_by_country$CountryName)
events_is_vs_gz_by_country$CountryName <- gsub("Trinidad and Tobago", "Trinidad", events_is_vs_gz_by_country$CountryName)
events_is_vs_gz_by_country$CountryName <- gsub("Saint Vincent and the Grenadines", "Saint Vincent", events_is_vs_gz_by_country$CountryName)
events_is_vs_gz_by_country$CountryName <- gsub("Myanmar [Burma]", "Myanmar", events_is_vs_gz_by_country$CountryName)
events_is_vs_gz_by_country$CountryName <- gsub("Macedonia [FYROM]", "North Macedonia", events_is_vs_gz_by_country$CountryName)
map_data <- events_is_vs_gz_by_country %>%
left_join(mapdata, by = c("CountryName" = "region"), keep=TRUE)
test <- map_data %>% filter(is.na(region))
events_is_vs_gz_percent_report_map <- world_map +
geom_polygon(
data = map_data,
aes(
x = long,
y = lat,
group = group,
fill = PercOccur
),
alpha = 0.5
) +
scale_fill_gradient(low = "red", high = "blue", name = "Percentage of Reports", na.value = "grey") +
labs(title = "Global distribution of domains within GDELT",
caption = "GDELT places domains in countries where they report the most.\n This is an overview of the divercity/indivercity of the distribution of those domains",
size = "Number of Domains") +
theme_void() +
theme(
axis.text = element_blank(),
axis.title = element_blank(),
axis.ticks = element_blank(),
legend.position = "bottom",
plot.title = element_text(size = 20, hjust = 0.5)
)
plot(events_is_vs_gz_percent_report_map)
ggsave(
"events/is_vs_gz/figures/events_is_vs_gz_percent_report_map.png",
events_is_vs_gz_percent_report_map,
width = 10,
height = 7,
units = "in",
dpi = 300
)
View(events_is_vs_gz_by_country)
events_is_vs_gz_percent_report_map <- world_map +
geom_polygon(
data = map_data,
aes(
x = long,
y = lat,
group = group,
fill = PercOccur
),
alpha = 0.5
) +
scale_fill_gradient(low = "red", high = "blue", name = "Percentage of Reports", na.value = "grey") +
labs(title = "Share of IS vs GZ reports out of all reports") +
theme_void() +
theme(
axis.text = element_blank(),
axis.title = element_blank(),
axis.ticks = element_blank(),
legend.position = "bottom",
plot.title = element_text(size = 20, hjust = 0.5)
)
plot(events_is_vs_gz_percent_report_map)
events_is_vs_gz_percent_report_map <- world_map +
geom_polygon(
data = map_data,
aes(
x = long,
y = lat,
group = group,
fill = PercOccur
),
alpha = 0.5
) +
scale_fill_gradient(low = "red", high = "blue", name = "Percentage of Reports", na.value = "grey") +
labs(title = "Share of IS vs GZ reports out of all reports",
caption = "The share of IS and GZ reports is shown here for each country in relation to all reports published in the country") +
theme_void() +
theme(
axis.text = element_blank(),
axis.title = element_blank(),
axis.ticks = element_blank(),
legend.position = "bottom",
plot.title = element_text(size = 20, hjust = 0.5)
)
plot(events_is_vs_gz_percent_report_map)
events_is_vs_gz_percent_report_map <- world_map +
geom_polygon(
data = map_data,
aes(
x = long,
y = lat,
group = group,
fill = PercOccur
),
alpha = 0.5
) +
scale_fill_gradient(low = "red", high = "blue", name = "Percentage of Reports", na.value = "grey") +
labs(title = "Share of IS vs GZ reports out of all reports",
caption = "The share of IS and GZ reports is shown here for each country\nin relation to all reports published in the country") +
theme_void() +
theme(
axis.text = element_blank(),
axis.title = element_blank(),
axis.ticks = element_blank(),
legend.position = "bottom",
plot.title = element_text(size = 20, hjust = 0.5)
)
plot(events_is_vs_gz_percent_report_map)
ggsave(
"events/is_vs_gz/figures/events_is_vs_gz_percent_report_map.png",
events_is_vs_gz_percent_report_map,
width = 10,
height = 7,
units = "in",
dpi = 300
)
gc()
